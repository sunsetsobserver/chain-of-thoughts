METER: 4/4

TITLE
Bars 21–34 — slow long progression of notes telling a story in strings vs. rhythmical changes and field with interleaved “ripple” runs (short, bright), 4/4 throughout.

INSTRUMENTS (EXACT)
String instruments [violin, cello, double_bass] play the long sustained notes.
Other instruments [alto_flute, bass_clarinet, trumpet] play the short "ripples".

Monophony per instrument at all times (no chords inside a single part).

GLOBAL CHARACTER
A center-weighted, slowly shifting long notes in strings with occasional short chords giving a rhytmical small pulse, like a small jumping point to the next long chord for strings [violin, cello, double_bass], with very occasional bright, short ripples that dance above it [alto_flute, bass_clarinet, trumpet].

SECTION STRUCTURE
Produce exactly fourteen bars of 4/4 (ticks 0..15 per bar). Return one JSON object with:
  "bars": [ { …bar 21… }, { …bar 22… }, … { …bar 34… } ]

STRINGS:
• TIME and DURATION (sttings): Time onsets strictly increase using only add {1,2,3,4}. Starting times should be always different per each instrument and unexpected. So don't always start with the same time for each instrument. The notes should make a harmonically-logical span played throught bars 21-34.
The strings should never break completely, so at least one string instrument should always be playing in this section.
• PITCH AND HARMONY ACROSS STRING INSTRUMENTS: add/sub only; keep inside hard range of the instruments used, bias to LOW for double_bass, LOW↔MID for cello/bass_clarinet, MID for violin, MID↔HIGH for alto_flute/trumpet.
You can be creative in how to realise this harmonically, but the most important quality is that the progression quickly shifts its harmonic material. So it's not monotonous - it brings tension and each next note introduce in the strings should feel like making more and more pressure toward the release.
• VELOCITY (STRINGS): start calm mp–mf ≈ 56–72 (small per-step deltas ≤4), but gradually, slowly increas towards around velocity 80.  
• METER: seeds set numerator=4, denominator=4; transforms add 0.
• Silence between the long string notes is not possible in general, plan for the continuity of the strings sound without interruption, meaning that if in one instrument the drone notes finishes at some tick, then some other instrument should best start its drone note from there, for continuity. Small tiny breaks in strings are only possible if there are logically making sense ends of musical phrases built for these strings. But we might have a maximum of 3 such phrases in that fragment, so perhaps a maximum of 2 short breaks really. Not more.

RIPPLES OVERLAY (A MUST — INTERLEAVED ABOVE THE STRINGS)
Very occasionally, short, bright monophonic “ripple” gestures should appear randomly across [alto_flute, bass_clarinet, trumpet] with these precise rules:

Activation
• Never play two ripples at the same time. Only one instrument between [alto_flute, bass_clarinet, trumpet] can play. The rest from this group has to be silent (and the strings continue the drones in the background).
• Do not repeat the ripples in the same instrument that just played them. Alternate between instruments and make it sound like a conversation. If one ripple was a question, then the next ripple should respond to it, etc.
• LENGTH of each ripple should be around 3 to 6 notes. A ripple is basically a quick short melody on a scale contrasting to the harmony currently played on the string instruments in the background. It should be very quick and consisting only of very short, staccato notes.
• VELOCITY: bright, definitely louder than the slow notes below. In the range between 70 and 90.
• Ripples shouldn't start at metrically repeatable time differences. Their introduction should always be a bit unexpected. Thus they cannot also appear too often. Only from time to time.
• TIME: strictly increasing onsets; per-note gaps are 1 or 2 ticks (add {1,2}); all onsets < 16.  
• DURATION: each note lasts 1 (sixteenth note) or 2 ticks (eights note) (always ≤ distance to next onset and within bar).
• PITCH STEPS (PC LOGIC): use only add/sub semitone deltas that realize tertian/quartal pitch-class moves (±3 or ±4) from the previous note’s pc, then snap to the nearest legal MIDI inside the instrument’s range around the movement direction. Keep all realized pitches strictly within hard ranges of the used instruments! (important).  
• MONOPHONY: a ripple cannot overlap any other note for the same instrument. Remember that we are composing for melodic instruments only (meaning: can only play one note at a time).

PT REALIZATION HINTS (to satisfy the engine’s rules)
• Pitch uses add/sub only (no mul/div).  
• Velocity uses add/sub with small deltas (as ranges above).  
• Seeds set numerator=4 and denominator=4 for all features; numerator/denominator transforms are [{"name":"add","args":[0]}].

FINAL OUTPUT
* Return one JSON object with top-level key `"bars" : [ … ]` (non-empty). No prose, no code fences, no extra keys.
* Each bar has exactly six features with `meta.instrument` in this set and in any order:
  `["alto_flute","violin","bass_clarinet","trumpet","cello","double_bass"]`.
* Each feature has one pt with this exact dimensions list and keys (order matters):
  ```json
  "dimensions":[
    {"feature_name":"time","transformations":[{"name":"add","args":[INT]}]},
    {"feature_name":"duration","transformations":[{"name":"add","args":[INT]}]},
    {"feature_name":"pitch","transformations":[{"name":"add","args":[INT]}]},
    {"feature_name":"velocity","transformations":[{"name":"add","args":[INT]}]},
    {"feature_name":"numerator","transformations":[{"name":"add","args":[0]}]},
    {"feature_name":"denominator","transformations":[{"name":"add","args":[0]}]}
  ]
  ```
Never use `"name"` at the dimension level; the key must be `"feature_name"`.
All transformation `args` are single unsigned integers. To decrease, use `"subtract"` (never `"add": -k`).

* Include a run_plan with exactly six entries (one per feature). For each entry:
  * `"feature_name"` must equal the corresponding `pt.name` (string-exact).
  * `"N"` is a positive integer; all streams for that feature have length `N`.
  * `"seeds"` contains exactly these keys: `time, duration, pitch, velocity, numerator, denominator`.
  * `numerator`/`denominator` seeds match the unit meter; their transforms are always `{"name":"add","args":[0]}`.

* Monophony & bounds: onsets strictly increase (`time` uses only `add` with {1,2,3,4}); no overlaps (each `duration[i]` ≤ gap to next onset; last note ends ≤ `BAR_TICKS`).
  `pitch` uses only `add`/`subtract` and remains inside each instrument’s hard range given above.
  `velocity` uses only `add`/`subtract` with small musical steps.

* Add `"created_feature_names"` echoing `features[*].pt.name` in order.

Do not return the JSON until the following self-checks are true:

1. Every dimension object has `"feature_name"` (not `"name"`).
2. Each feature has exactly six dimensions in the order shown.
3. `run_plan[*].feature_name` string-matches a `pt.name`.
4. Seeds include all six keys; meter seeds match the unit meter.
5. Last note per feature satisfies `time[N−1] + duration[N−1] ≤ BAR_TICKS`.